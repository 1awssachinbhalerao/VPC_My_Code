vpc.tf

provider "aws" {
  region = var.region
}

module "vpc" {
  source = "./modules/vpc"
  #version = "5.0.0"  # specify the latest version

  name = "${var.project}-${var.environment}-${var.reg}-vpc01"
  cidr = var.vpc_cidr

  azs             = var.private_subnet_azs
  private_subnets = var.private_subnets

  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Terraform   = "true"
    Environment = var.environment
  }
}

resource "aws_vpc_ipv4_cidr_block_association" "non_routable_additional_cidr" {
  vpc_id     = module.vpc.vpc_id
  cidr_block = var.non_routable_vpc_cidr
}

resource "aws_subnet" "non_routable_subnet" {
  count = length(var.non_routable_subnets)

  vpc_id            = module.vpc.vpc_id
  cidr_block        = var.non_routable_subnets[count.index]
  availability_zone = var.non_routable_subnet_azs[count.index]

  tags = {
    Name        = "${var.project}-${var.environment}-${var.reg}-non-routable-subnet-${var.non_routable_subnet_azs[count.index]}"
    Environment = var.environment
  }
}

resource "aws_security_group" "alb_sg" {
  vpc_id      = module.vpc.vpc_id
  description = "Security group for ALB used with ECS service"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow HTTPS traffic to VPC and non-routable subnets"
  }

  tags = {
    Name                = "${var.project}-${var.environment}-${var.reg}-alb-sg"
    cactus_exclusions    = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_security_group" "mmd_sit_ew1_vpc01_ecs_sg02" {
  vpc_id      = module.vpc.vpc_id
  description = "Security group for ECS used with ECS service"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow HTTPS traffic to VPC and non-routable subnets"
  }

  tags = {
    Name                = "${var.project}-${var.environment}-${var.reg}-ecs-sg02"
    cactus_exclusions    = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_security_group" "mmd_sit_ew1_vpc01_rds_sg03" {
  vpc_id      = module.vpc.vpc_id
  description = "Security group for RDS used with ECS service"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow HTTPS traffic to VPC and non-routable subnets"
  }

  tags = {
    Name                = "${var.project}-${var.environment}-${var.reg}-rds-sg03"
    cactus_exclusions    = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_security_group" "mmd_sit_ew1_vpc01_endpoints_sg04" {
  vpc_id      = module.vpc.vpc_id
  description = "Security group for Endpoints used with ECS service"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow HTTPS traffic to VPC and non-routable subnets"
  }

  tags = {
    Name                = "${var.project}-${var.environment}-${var.reg}-endpoints-sg04"
    cactus_exclusions    = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_network_acl" "nacl01" {
  vpc_id = module.vpc.vpc_id

  ingress {
    protocol   = "-1"
    rule_no    = 105
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 0
    to_port    = 0
  }

   ingress {
    protocol   = "-1"
    rule_no    = 106
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 0
    to_port    = 0
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 107
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 108
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  egress {
    protocol   = "-1"
    rule_no    = 105
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 0
    to_port    = 0
  }

   egress {
    protocol   = "-1"
    rule_no    = 106
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 0
    to_port    = 0
  }

  egress {
    protocol   = "tcp"
    rule_no    = 107
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 443
    to_port    = 443
  }

  egress {
    protocol   = "tcp"
    rule_no    = 108
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 443
    to_port    = 443
  }

  tags = {
    Name              = "${var.project}-${var.environment}-${var.reg}-nacl01"
    cactus_exclusions  = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_network_acl_association" "private_subnet_association" {
  count = length(module.vpc.private_subnets)

  subnet_id      = element(module.vpc.private_subnets, count.index)
  network_acl_id = aws_network_acl.nacl01.id
}

resource "aws_network_acl" "mmd_sit_vpc01_nr_subnet_nacl01" {
  vpc_id = module.vpc.vpc_id

  ingress {
    protocol   = "-1"
    rule_no    = 105
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 0
    to_port    = 0
  }

   ingress {
    protocol   = "-1"
    rule_no    = 106
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 0
    to_port    = 0
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 107
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 108
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  egress {
    protocol   = "-1"
    rule_no    = 105
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 0
    to_port    = 0
  }

   egress {
    protocol   = "-1"
    rule_no    = 106
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 0
    to_port    = 0
  }

  egress {
    protocol   = "tcp"
    rule_no    = 107
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 443
    to_port    = 443
  }

  egress {
    protocol   = "tcp"
    rule_no    = 108
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 443
    to_port    = 443
  }

  tags = {
    Name              = "${var.project}-${var.environment}-${var.reg}-nr-subnet-nacl01"
    cactus_exclusions  = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_network_acl_association" "non_routable_subnet_association" {
  count = length(aws_subnet.non_routable_subnet)

  subnet_id      = aws_subnet.non_routable_subnet[count.index].id
  network_acl_id = aws_network_acl.mmd_sit_vpc01_nr_subnet_nacl01.id
}



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



outputs.tf 

output "vpc_id" {
  description = "The ID of the VPC"
  value       = module.vpc.vpc_id
}

output "vpc_cidr_block" {
  description = "The CIDR block of the VPC"
  value       = module.vpc.vpc_cidr_block
}

output "private_subnets" {
  description = "The list of private subnets"
  value       = module.vpc.private_subnets
}

output "alb_sg_id" {
  description = "The ID of the ALB security group"
  value       = aws_security_group.alb_sg.id
}

output "alb_sg_arn" {
  description = "The ARN of the ALB security group"
  value       = aws_security_group.alb_sg.arn
}

output "alb_sg_name" {
  description = "The name of the ALB security group"
  value       = aws_security_group.alb_sg.name
}

output "mmd_sit_ew1_vpc01_ecs_sg02_id" {
  description = "The ID of the ECS security group"
  value       = aws_security_group.mmd_sit_ew1_vpc01_ecs_sg02.id
}

output "mmd_sit_ew1_vpc01_rds_sg03_id" {
  description = "The ID of the RDS security group"
  value       = aws_security_group.mmd_sit_ew1_vpc01_rds_sg03.id
}

output "mmd_sit_ew1_vpc01_endpoints_sg04_id" {
  description = "The ID of the Endpoints security group"
  value       = aws_security_group.mmd_sit_ew1_vpc01_endpoints_sg04.id
}

output "network_acl_id" {
  description = "The ID of the network ACL"
  value       = aws_network_acl.nacl01.id
}

output "non_routable_subnets" {
  description = "The list of non-routable subnets"
  value       = aws_subnet.non_routable_subnet[*].id
}

output "mmd_sit_vpc01_nr_subnet_nacl01_id" {
  description = "The ID of the non-routable subnet NACL"
  value       = aws_network_acl.mmd_sit_vpc01_nr_subnet_nacl01.id
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

variables.tf

variable "region" {
  description = "The AWS region to deploy the VPC"
  type        = string
  default     = "eu-west-1"
}

variable "vpc_name" {
  description = "The name of the VPC"
  type        = string
  default     = "routable-vpc01"
}

variable "vpc_cidr" {
  description = "The CIDR block for the VPC"
  type        = string
  default     = "10.215.51.0/25"
}

variable "private_subnets" {
  description = "A list of CIDR blocks for the private subnets"
  type        = list(string)
  default     = ["10.215.51.0/26", "10.215.51.64/27", "10.215.51.96/27"]
}

variable "private_subnet_azs" {
  description = "A list of availability zones for the private subnets"
  type        = list(string)
  default     = ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
}

variable "non_routable_vpc_cidr" {
  description = "The additional CIDR block for the VPC"
  type        = string
  default     = "100.100.0.0/16"
}

variable "non_routable_subnets" {
  description = "A list of CIDR blocks for the non-routable subnets"
  type        = list(string)
  default     = ["100.100.0.0/20", "100.100.16.0/20", "100.100.32.0/20"]
}

variable "non_routable_subnet_azs" {
  description = "A list of availability zones for the non-routable subnets"
  type        = list(string)
  default     = ["eu-west-1a", "eu-west-1b", "eu-west-1c"]
}

variable "environment" {
  description = "The environment name"
  type        = string
  default     = "sit"
}

variable "project" {
  description = "The Project name"
  type        = string
  default     = "mmd"
}

variable "reg" {
  description = "The Regon Short Form"
  type        = string
  default     = "ew1"
}




