vpc/
  ├── main.tf
  ├── outputs.tf
  ├── variables.tf
---------------------------------------------

main.tf

resource "aws_vpc" "custom_vpc" {
  cidr_block = var.vpc_cidr
  enable_dns_support = true
  enable_dns_hostnames = true

  tags = {
    Name = "${var.name_prefix}-vpc"
  }
}

resource "aws_subnet" "public_subnet" {
  count = 2

  vpc_id = aws_vpc.custom_vpc.id
  cidr_block = element(var.public_subnet_cidrs, count.index)
  map_public_ip_on_launch = true
  availability_zone = element(var.availability_zones, count.index)

  tags = {
    Name = "${var.name_prefix}-public-subnet-${count.index + 1}"
  }
}

resource "aws_subnet" "private_subnet" {
  count = 2

  vpc_id = aws_vpc.custom_vpc.id
  cidr_block = element(var.private_subnet_cidrs, count.index)
  availability_zone = element(var.availability_zones, count.index)

  tags = {
    Name = "${var.name_prefix}-private-subnet-${count.index + 1}"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.custom_vpc.id

  tags = {
    Name = "${var.name_prefix}-igw"
  }
}

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.custom_vpc.id

  tags = {
    Name = "${var.name_prefix}-public-rt"
  }
}

resource "aws_route" "public_route" {
  route_table_id = aws_route_table.public_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.igw.id
}

resource "aws_route_table_association" "public_rt_assoc" {
  count = 2

  subnet_id = aws_subnet.public_subnet[count.index].id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_eip" "nat_eip" {
  count = 2
  vpc = true
}

resource "aws_nat_gateway" "nat_gw" {
  count = 2

  allocation_id = aws_eip.nat_eip[count.index].id
  subnet_id = element(aws_subnet.public_subnet[*].id, count.index)

  tags = {
    Name = "${var.name_prefix}-nat-gw-${count.index + 1}"
  }
}

resource "aws_route_table" "private_rt" {
  count = 2

  vpc_id = aws_vpc.custom_vpc.id

  tags = {
    Name = "${var.name_prefix}-private-rt-${count.index + 1}"
  }
}

resource "aws_route" "private_route" {
  count = 2

  route_table_id = aws_route_table.private_rt[count.index].id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id = element(aws_nat_gateway.nat_gw[*].id, count.index)
}

resource "aws_route_table_association" "private_rt_assoc" {
  count = 2

  subnet_id = aws_subnet.private_subnet[count.index].id
  route_table_id = aws_route_table.private_rt[count.index].id
}

#variables.tf
variable "name_prefix" {
  description = "Prefix for resource names"
  type = string
}

variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type = string
}

variable "public_subnet_cidrs" {
  description = "CIDR blocks for public subnets"
  type = list(string)
}

variable "private_subnet_cidrs" {
  description = "CIDR blocks for private subnets"
  type = list(string)
}

variable "availability_zones" {
  description = "Availability zones to deploy the subnets"
  type = list(string)
}

#outputs.tf

output "vpc_id" {
  value = aws_vpc.custom_vpc.id
}

output "public_subnet_ids" {
  value = aws_subnet.public_subnet[*].id
}

output "private_subnet_ids" {
  value = aws_subnet.private_subnet[*].id
}

output "nat_gateway_ids" {
  value = aws_nat_gateway.nat_gw[*].id
}

++++++++++++++++++++++++++++++++++++++++++++++++

Ensure your AWS credentials are configured in your environment.
Run terraform init to initialize Terraform.
Run terraform apply to create the resources. Confirm with "yes" when prompted.


#security-group.tf

resource "aws_security_group" "ssh_sg" {
  name        = "${var.name_prefix}-ssh-sg"
  description = "Allow SSH traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-ssh-sg"
  }
}

#instance.tf
resource "aws_instance" "my_instance" {
  ami           = "ami-0c55b159cbfafe1f0" # Example AMI, use a suitable one for your region
  instance_type = "t2.micro"

  key_name = aws_key_pair.my_key.key_name

  subnet_id = element(module.vpc.public_subnet_ids, 0)

  security_groups = [aws_security_group.ssh_sg.name]

  tags = {
    Name = "${var.name_prefix}-instance"
  }
}

#variables.tf

variable "name_prefix" {
  description = "Prefix for resource names"
  type = string
}


#outputs.tf
output "instance_public_ip" {
  value = aws_instance.my_instance.public_ip
}

# VPC Root Module Changes 

module "vpc" {
  source              = "./vpc"
  name_prefix         = "my-vpc"
  vpc_cidr            = "10.0.0.0/16"
  public_subnet_cidrs = ["10.0.0.0/28", "10.0.0.16/28"]
  private_subnet_cidrs = ["10.0.1.0/28", "10.0.1.16/28"]
  availability_zones  = ["us-east-1a", "us-east-1b"]
}

resource "aws_key_pair" "my_key" {
  key_name   = "my_key_pair"
  public_key = file("~/.ssh/id_rsa.pub")
}

resource "aws_security_group" "ssh_sg" {
  name        = "${var.name_prefix}-ssh-sg"
  description = "Allow SSH traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-ssh-sg"
  }
}

resource "aws_instance" "my_instance" {
  ami           = "ami-0c55b159cbfafe1f0" # Example AMI, use a suitable one for your region
  instance_type = "t2.micro"

  key_name = aws_key_pair.my_key.key_name

  subnet_id = element(module.vpc.public_subnet_ids, 0)

  security_groups = [aws_security_group.ssh_sg.name]

  tags = {
    Name = "${var.name_prefix}-instance"
  }
}

output "instance_public_ip" {
  value = aws_instance.my_instance.public_ip
}


# After Apply

ssh -i ~/.ssh/id_rsa ec2-user@$(terraform output -raw instance_public_ip)


###################################################################################################

#provider.tf

provider "aws" {
  region = "us-east-1"
}


#variables.tf

variable "name_prefix" {
  description = "Prefix for resource names"
  type        = string
  default     = "my-web-server"
}


#security-group.tf

resource "aws_security_group" "web_sg" {
  name        = "${var.name_prefix}-web-sg"
  description = "Allow HTTP and SSH traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-web-sg"
  }
}


#instance.tf

resource "aws_instance" "web_instance" {
  ami           = "ami-0c55b159cbfafe1f0" # Use the latest Ubuntu AMI for your region
  instance_type = "t2.micro"

  key_name = aws_key_pair.my_key.key_name

  subnet_id = element(module.vpc.public_subnet_ids, 0)

  security_groups = [aws_security_group.web_sg.name]

  tags = {
    Name = "${var.name_prefix}-instance"
  }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              echo '<html><body><h1>Hello from ${var.name_prefix}</h1></body></html>' > /var/www/html/index.html
              systemctl restart apache2
              EOF
}

output "web_instance_public_ip" {
  value = aws_instance.web_instance.public_ip
}


#main.tf

module "vpc" {
  source              = "./vpc"
  name_prefix         = "my-vpc"
  vpc_cidr            = "10.0.0.0/16"
  public_subnet_cidrs = ["10.0.0.0/28", "10.0.0.16/28"]
  private_subnet_cidrs = ["10.0.1.0/28", "10.0.1.16/28"]
  availability_zones  = ["us-east-1a", "us-east-1b"]
}

resource "aws_key_pair" "my_key" {
  key_name   = "my_key_pair"
  public_key = file("~/.ssh/id_rsa.pub")
}

resource "aws_security_group" "web_sg" {
  name        = "${var.name_prefix}-web-sg"
  description = "Allow HTTP and SSH traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-web-sg"
  }
}

resource "aws_instance" "web_instance" {
  ami           = "ami-0c55b159cbfafe1f0" # Use the latest Ubuntu AMI for your region
  instance_type = "t2.micro"

  key_name = aws_key_pair.my_key.key_name

  subnet_id = element(module.vpc.public_subnet_ids, 0)

  security_groups = [aws_security_group.web_sg.name]

  tags = {
    Name = "${var.name_prefix}-instance"
  }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              echo '<html><body><h1>Hello from ${var.name_prefix}</h1></body></html>' > /var/www/html/index.html
              systemctl restart apache2
              EOF
}

output "web_instance_public_ip" {
  value = aws_instance.web_instance.public_ip
}


#Test the Web Server

curl http://$(terraform output -raw web_instance_public_ip)


*****************************************************************************************************
*****************************************************************************************************
*****************************************************************************************************

#provider.tf

provider "aws" {
  region = "us-east-1"
}


#variables.tf

variable "name_prefix" {
  description = "Prefix for resource names"
  type        = string
  default     = "my-web-server"
}

variable "ami_id" {
  description = "The AMI ID for the instances"
  type        = string
  default     = "ami-0c55b159cbfafe1f0"  # Use the latest Ubuntu AMI for your region
}

variable "instance_type" {
  description = "The instance type for the instances"
  type        = string
  default     = "t2.micro"
}

variable "vpc_id" {
  description = "The VPC ID where the resources will be created"
  type        = string
}

variable "public_subnet_ids" {
  description = "A list of public subnet IDs"
  type        = list(string)
}


#security-group.tf

resource "aws_security_group" "web_sg" {
  name        = "${var.name_prefix}-web-sg"
  description = "Allow HTTP and SSH traffic"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-web-sg"
  }
}


#launch-configuration.tf

resource "aws_launch_configuration" "web_lc" {
  name          = "${var.name_prefix}-lc"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = aws_key_pair.my_key.key_name
  security_groups = [aws_security_group.web_sg.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              echo '<html><body><h1>Hello from ${var.name_prefix}</h1></body></html>' > /var/www/html/index.html
              systemctl restart apache2
              EOF

  lifecycle {
    create_before_destroy = true
  }
}


#autoscaling.tf

resource "aws_autoscaling_group" "web_asg" {
  launch_configuration = aws_launch_configuration.web_lc.id
  min_size             = 2
  max_size             = 5
  desired_capacity     = 2
  vpc_zone_identifier  = var.public_subnet_ids

  tags = [
    {
      key                 = "Name"
      value               = "${var.name_prefix}-instance"
      propagate_at_launch = true
    }
  ]

  health_check_type         = "EC2"
  health_check_grace_period = 300

  force_delete = true
}

#key-pair.tf

resource "aws_key_pair" "my_key" {
  key_name   = "my_key_pair"
  public_key = file("~/.ssh/id_rsa.pub")
}

#main.tf

module "vpc" {
  source              = "./vpc"
  name_prefix         = "my-vpc"
  vpc_cidr            = "10.0.0.0/16"
  public_subnet_cidrs = ["10.0.0.0/28", "10.0.0.16/28"]
  private_subnet_cidrs = ["10.0.1.0/28", "10.0.1.16/28"]
  availability_zones  = ["us-east-1a", "us-east-1b"]
}

resource "aws_key_pair" "my_key" {
  key_name   = "my_key_pair"
  public_key = file("~/.ssh/id_rsa.pub")
}

resource "aws_security_group" "web_sg" {
  name        = "${var.name_prefix}-web-sg"
  description = "Allow HTTP and SSH traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-web-sg"
  }
}

resource "aws_launch_configuration" "web_lc" {
  name          = "${var.name_prefix}-lc"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = aws_key_pair.my_key.key_name
  security_groups = [aws_security_group.web_sg.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              echo '<html><body><h1>Hello from ${var.name_prefix}</h1></body></html>' > /var/www/html/index.html
              systemctl restart apache2
              EOF

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "web_asg" {
  launch_configuration = aws_launch_configuration.web_lc.id
  min_size             = 2
  max_size             = 5
  desired_capacity     = 2
  vpc_zone_identifier  = module.vpc.public_subnet_ids

  tags = [
    {
      key                 = "Name"
      value               = "${var.name_prefix}-instance"
      propagate_at_launch = true
    }
  ]

  health_check_type         = "EC2"
  health_check_grace_period = 300

  force_delete = true
}

output "web_asg_public_ips" {
  value = aws_autoscaling_group.web_asg.instances[*].public_ip
}

/*

This configuration will create a VPC with public subnets, a security group allowing SSH and HTTP traffic, a launch configuration for the web servers, and an autoscaling group to manage the web servers. The autoscaling group will ensure there are always at least 2 instances running and will scale up to 5 instances if necessary.

*/


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#provider.tf

provider "aws" {
  region = "us-east-1"
}


#variables.tf

variable "name_prefix" {
  description = "Prefix for resource names"
  type        = string
  default     = "my-web-server"
}

variable "ami_id" {
  description = "The AMI ID for the instances"
  type        = string
  default     = "ami-0c55b159cbfafe1f0"  # Use the latest Ubuntu AMI for your region
}

variable "instance_type" {
  description = "The instance type for the instances"
  type        = string
  default     = "t2.micro"
}

variable "vpc_id" {
  description = "The VPC ID where the resources will be created"
  type        = string
}

variable "public_subnet_ids" {
  description = "A list of public subnet IDs"
  type        = list(string)
}

#security-group.tf

resource "aws_security_group" "web_sg" {
  name        = "${var.name_prefix}-web-sg"
  description = "Allow HTTP and SSH traffic"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-web-sg"
  }
}

resource "aws_security_group" "alb_sg" {
  name        = "${var.name_prefix}-alb-sg"
  description = "Allow HTTP traffic to the ALB"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-alb-sg"
  }
}


#launch-configuration.tf

resource "aws_launch_configuration" "web_lc" {
  name          = "${var.name_prefix}-lc"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = aws_key_pair.my_key.key_name
  security_groups = [aws_security_group.web_sg.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              echo '<html><body><h1>Hello from ${var.name_prefix}</h1></body></html>' > /var/www/html/index.html
              systemctl restart apache2
              EOF

  lifecycle {
    create_before_destroy = true
  }
}


#autoscaling.tf

resource "aws_autoscaling_group" "web_asg" {
  launch_configuration = aws_launch_configuration.web_lc.id
  min_size             = 2
  max_size             = 5
  desired_capacity     = 2
  vpc_zone_identifier  = var.public_subnet_ids

  tags = [
    {
      key                 = "Name"
      value               = "${var.name_prefix}-instance"
      propagate_at_launch = true
    }
  ]

  health_check_type         = "EC2"
  health_check_grace_period = 300

  force_delete = true
}


  #load-balancer.tf

resource "aws_lb" "web_alb" {
  name               = "${var.name_prefix}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = var.public_subnet_ids

  enable_deletion_protection = false

  tags = {
    Name = "${var.name_prefix}-alb"
  }
}

resource "aws_lb_target_group" "web_tg" {
  name     = "${var.name_prefix}-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = var.vpc_id

  health_check {
    interval            = 30
    path                = "/"
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
    protocol            = "HTTP"
  }

  tags = {
    Name = "${var.name_prefix}-tg"
  }
}

resource "aws_lb_listener" "web_listener" {
  load_balancer_arn = aws_lb.web_alb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web_tg.arn
  }
}

resource "aws_autoscaling_attachment" "asg_attachment" {
  autoscaling_group_name = aws_autoscaling_group.web_asg.name
  lb_target_group_arn    = aws_lb_target_group.web_tg.arn
}


#key-pair.tf

resource "aws_key_pair" "my_key" {
  key_name   = "my_key_pair"
  public_key = file("~/.ssh/id_rsa.pub")
}

#main.tf

module "vpc" {
  source              = "./vpc"
  name_prefix         = "my-vpc"
  vpc_cidr            = "10.0.0.0/16"
  public_subnet_cidrs = ["10.0.0.0/28", "10.0.0.16/28"]
  private_subnet_cidrs = ["10.0.1.0/28", "10.0.1.16/28"]
  availability_zones  = ["us-east-1a", "us-east-1b"]
}

resource "aws_key_pair" "my_key" {
  key_name   = "my_key_pair"
  public_key = file("~/.ssh/id_rsa.pub")
}

resource "aws_security_group" "web_sg" {
  name        = "${var.name_prefix}-web-sg"
  description = "Allow HTTP and SSH traffic"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-web-sg"
  }
}

resource "aws_security_group" "alb_sg" {
  name        = "${var.name_prefix}-alb-sg"
  description = "Allow HTTP traffic to the ALB"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.name_prefix}-alb-sg"
  }
}

resource "aws_launch_configuration" "web_lc" {
  name          = "${var.name_prefix}-lc"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = aws_key_pair.my_key.key_name
  security_groups = [aws_security_group.web_sg.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              echo '<html><body><h1>Hello from ${var.name_prefix}</h1></body></html>' > /var/www/html/index.html
              systemctl restart apache2
              EOF

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "web_asg" {
  launch_configuration = aws_launch_configuration.web_lc.id
  min_size             = 2
  max_size             = 5
  desired_capacity     = 2
  vpc_zone_identifier  = module.vpc.public_subnet_ids

  tags = [
    {
      key                 = "Name"
      value               = "${var.name_prefix}-instance"
      propagate_at_launch = true
    }
  ]

  health_check_type         = "EC2"
  health_check_grace_period = 300

  force_delete = true
}

resource "aws_lb" "web_alb" {
  name               = "${var.name_prefix}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = module.vpc.public_subnet_ids

  enable_deletion_protection = false

  tags = {
    Name = "${var.name_prefix}-alb"
  }
}

resource "aws_lb_target_group" "web_tg" {
  name     = "${var.name_prefix}-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = module.vpc.vpc_id

  health_check {
    interval            = 30
    path                = "/"
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
    protocol            = "HTTP"
  }

  tags = {
    Name = "${var.name_prefix}-tg"
  }
}

resource "aws_lb_listener" "web_listener" {
  load_balancer_arn = aws_lb.web_alb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.web_tg.arn
  }
}

resource "aws_autoscaling_attachment" "asg_attachment" {
  autoscaling_group_name = aws_autoscaling_group.web_asg.name
  lb_target_group_arn    = aws_lb_target_group.web_tg.arn
}

output "web_alb_dns" {
  value = aws_lb.web_alb.dns_name
}


/*
This configuration will create a VPC with public subnets, security groups for the web servers and the ALB, a launch configuration for the web servers, an autoscaling group to manage the web servers, and an application load balancer to distribute traffic. The ALB will check the health of the instances before forwarding requests.
*/



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


provider "aws" {
  region = "us-east-1"
}

module "iam_role" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role"
  version = "~> 5.0"

  create_role = true
  role_name   = var.role_name
  description = var.role_description

  policy_arns = [aws_iam_policy.start_stop_rds_instance.arn]

  oidc_providers = [
    {
      provider_url = "https://example.com"
      client_id    = var.idp_name
    }
  ]

  tags = {
    Terraform = "true"
    Environment = "SIT"
  }
}

resource "aws_iam_policy" "start_stop_rds_instance" {
  name        = "StartStopRDSInstancePolicy"
  description = "Policy to start and stop RDS instances"
  policy      = data.aws_iam_policy_document.start_stop_rds_instance.json
}

data "aws_iam_policy_document" "start_stop_rds_instance" {
  statement {
    actions = [
      "rds:StartDBInstance",
      "rds:StopDBInstance"
    ]
    resources = ["*"]
  }
}

variable "idp_name" {
  description = "IDP name"
  type        = string
  default     = "idp1"
}

variable "role_name" {
  description = "Name of the IAM Role"
  type        = string
  default     = "ADFS-SIT-Ops"
}

variable "role_description" {
  description = "Description of the IAM Role"
  type        = string
  default     = "Start and Stop RDS Instance"
}



??????????????????????????????????????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????????????????????????????????????

provider "aws" {
  region = "us-east-1"
}

module "iam_role" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role"
  version = "~> 5.0"

  create_role = true
  role_name   = var.role_name
  description = var.role_description

  policy_arns = [aws_iam_policy.start_stop_aurora_postgresql.arn]

  oidc_providers = [
    {
      provider_url = "https://example.com"
      client_id    = var.idp_name
    }
  ]

  tags = {
    Terraform   = "true"
    Environment = "SIT"
  }
}

resource "aws_iam_policy" "start_stop_aurora_postgresql" {
  name        = "StartStopAuroraPostgreSQLPolicy"
  description = "Policy to start and stop Aurora PostgreSQL clusters"
  policy      = data.aws_iam_policy_document.start_stop_aurora_postgresql.json
}

data "aws_iam_policy_document" "start_stop_aurora_postgresql" {
  statement {
    actions = [
      "rds:StartDBCluster",
      "rds:StopDBCluster"
    ]
    resources = ["*"]
  }
}

variable "idp_name" {
  description = "IDP name"
  type        = string
  default     = "idp1"
}

variable "role_name" {
  description = "Name of the IAM Role"
  type        = string
  default     = "ADFS-SIT-Ops"
}

variable "role_description" {
  description = "Description of the IAM Role"
  type        = string
  default     = "Start and Stop Aurora PostgreSQL Cluster"
}

