provider "aws" {
  region = var.region
}

module "vpc" {
  source = "./modules/vpc"
  #version = "5.0.0"  # specify the latest version

  name = "${var.project}-${var.environment}-${var.reg}-vpc01"
  cidr = var.vpc_cidr

  azs             = var.private_subnet_azs
  private_subnets = var.private_subnets

  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Terraform   = "true"
    Environment = var.environment
  }
}

resource "aws_vpc_ipv4_cidr_block_association" "non_routable_additional_cidr" {
  vpc_id     = module.vpc.vpc_id
  cidr_block = var.non_routable_vpc_cidr
}

resource "aws_subnet" "non_routable_subnet" {
  count = length(var.non_routable_subnets)

  vpc_id            = module.vpc.vpc_id
  cidr_block        = var.non_routable_subnets[count.index]
  availability_zone = var.non_routable_subnet_azs[count.index]

  tags = {
    Name        = "${var.project}-${var.environment}-${var.reg}-non-routable-subnet-${var.non_routable_subnet_azs[count.index]}"
    Environment = var.environment
  }
}

resource "aws_security_group" "alb_sg" {
  vpc_id      = module.vpc.vpc_id
  description = "Security group for ALB used with ECS service"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow traffic from VPC and non-routable subnets"
  }

  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr, var.non_routable_vpc_cidr]
    description = "Allow HTTPS traffic to VPC and non-routable subnets"
  }

  tags = {
    Name                = "${var.project}-${var.environment}-${var.reg}-alb-sg"
    cactus_exclusions    = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_network_acl" "nacl01" {
  vpc_id = module.vpc.vpc_id

  ingress {
    protocol   = "tcp"
    rule_no    = 105
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  ingress {
    protocol   = "tcp"
    rule_no    = 106
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  egress {
    protocol   = "tcp"
    rule_no    = 105
    action     = "allow"
    cidr_block = var.vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  egress {
    protocol   = "tcp"
    rule_no    = 106
    action     = "allow"
    cidr_block = var.non_routable_vpc_cidr
    from_port  = 1024
    to_port    = 65535
  }

  tags = {
    Name              = "${var.project}-${var.environment}-${var.reg}-nacl01"
    cactus_exclusions  = "ecp_nacl_open , cactus_nacl_open"
  }
}

resource "aws_network_acl_association" "private_subnet_association" {
  count = length(module.vpc.private_subnets)

  subnet_id      = element(module.vpc.private_subnets, count.index)
  network_acl_id = aws_network_acl.nacl01.id
}

resource "aws_network_acl_association" "non_routable_subnet_association" {
  count = length(aws_subnet.non_routable_subnet)

  subnet_id      = aws_subnet.non_routable_subnet[count.index].id
  network_acl_id = aws_network_acl.nacl01.id
}
